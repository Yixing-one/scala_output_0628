[error] -- [E069] Naming Error: /Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/library/src/scala/IArray.scala:13:7 
[error] -- [E069] Naming Error: /Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/library/src/scala/IArray.scala:13:7 
[error] 13 |object IArray:
[error]    |       ^
[error] 13 |object IArray:
[error]    |       ^
[error]    |object IArray cannot have the same name as object IArray in package scala -- cannot define object member with the same name as a object member in self reference _.
[error]    |(Note: this can be resolved by using another name)
[error]    |object IArray cannot have the same name as object IArray in package scala -- cannot define object member with the same name as a object member in self reference _.
[error]    |(Note: this can be resolved by using another name)
[error] one error found
[error] one error found
[error] -- [E134] Type Error: /Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/community-build/community-projects/scala-java8-compat/src/main/scala-2.13+/scala/compat/java8/StreamConverters.scala:175:48 
[error] 175 |    def seqStream: Stream[A] = java.util.Arrays.stream(a)
[error]     |                               ^^^^^^^^^^^^^^^^^^^^^^^
[error]     |None of the overloaded alternatives of method stream in object Arrays with types
[error]     | (x$0: Array[Double] | Null, x$1: Int, x$2: Int): java.util.stream².DoubleStream
[error]     |  | Null
[error]     | (x$0: Array[Double] | Null): java.util.stream².DoubleStream | Null
[error]     | (x$0: Array[Long] | Null, x$1: Int, x$2: Int): java.util.stream².LongStream |
[error]     |  Null
[error]     | (x$0: Array[Long] | Null): java.util.stream².LongStream | Null
[error]     | (x$0: Array[Int] | Null, x$1: Int, x$2: Int): java.util.stream².IntStream | Null
[error]     | (x$0: Array[Int] | Null): java.util.stream².IntStream | Null
[error]     | [T]
[error]     |  (x$0: Array[Object & T | Null] | Null, x$1: Int, x$2: Int):
[error]     |    java.util.stream².Stream[T] | Null
[error]     | [T](x$0: Array[Object & T² | Null] | Null): java.util.stream².Stream[T²] | Null
[error]     |match arguments ((AnyArrayHasSeqParStream.this.a : Array[A]))
[error]     |
[error]     |where:    A       is a type in class AnyArrayHasSeqParStream with bounds <: AnyRef
[error]     |          T       is a type variable with constraint <: Object
[error]     |          T²      is a type variable with constraint <: Object
[error]     |          stream  is a method in object Arrays
[error]     |          stream² is a package in package java.util
[error] one error found
[error] Module scala-java8-compat:1.0.0+50-eb16484f-SNAPSHOT is not binary compatible with versions . You have to relax your compatibility intention by changing the value of versionPolicyIntention.
[error] mimaReportBinaryIssues failed
[error] (Compile / compileIncremental) Compilation failed
[error] (versionPolicyMimaCheck) mimaReportBinaryIssues failed
[error] Total time: 6 s, completed Jun 22, 2023, 4:10:39 AM
[error] -- [E134] Type Error: /Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/community-build/community-projects/scala-java8-compat/src/main/scala-2.13+/scala/compat/java8/StreamConverters.scala:175:48 
[error] 175 |    def seqStream: Stream[A] = java.util.Arrays.stream(a)
[error]     |                               ^^^^^^^^^^^^^^^^^^^^^^^
[error]     |None of the overloaded alternatives of method stream in object Arrays with types
[error]     | (x$0: Array[Double] | Null, x$1: Int, x$2: Int): java.util.stream².DoubleStream
[error]     |  | Null
[error]     | (x$0: Array[Double] | Null): java.util.stream².DoubleStream | Null
[error]     | (x$0: Array[Long] | Null, x$1: Int, x$2: Int): java.util.stream².LongStream |
[error]     |  Null
[error]     | (x$0: Array[Long] | Null): java.util.stream².LongStream | Null
[error]     | (x$0: Array[Int] | Null, x$1: Int, x$2: Int): java.util.stream².IntStream | Null
[error]     | (x$0: Array[Int] | Null): java.util.stream².IntStream | Null
[error]     | [T]
[error]     |  (x$0: Array[Object & T | Null] | Null, x$1: Int, x$2: Int):
[error]     |    java.util.stream².Stream[T] | Null
[error]     | [T](x$0: Array[Object & T² | Null] | Null): java.util.stream².Stream[T²] | Null
[error]     |match arguments ((AnyArrayHasSeqParStream.this.a : Array[A]))
[error]     |
[error]     |where:    A       is a type in class AnyArrayHasSeqParStream with bounds <: AnyRef
[error]     |          T       is a type variable with constraint <: Object
[error]     |          T²      is a type variable with constraint <: Object
[error]     |          stream  is a method in object Arrays
[error]     |          stream² is a package in package java.util
[error] one error found
[error] Module scala-java8-compat:1.0.0+50-eb16484f-SNAPSHOT is not binary compatible with versions . You have to relax your compatibility intention by changing the value of versionPolicyIntention.
[error] mimaReportBinaryIssues failed
[error] (Compile / compileIncremental) Compilation failed
[error] (versionPolicyMimaCheck) mimaReportBinaryIssues failed
[error] Total time: 6 s, completed Jun 22, 2023, 4:10:54 AM
[error] -- [E134] Type Error: /Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/community-build/community-projects/scala-java8-compat/src/main/scala-2.13+/scala/compat/java8/StreamConverters.scala:175:48 
[error] 175 |    def seqStream: Stream[A] = java.util.Arrays.stream(a)
[error]     |                               ^^^^^^^^^^^^^^^^^^^^^^^
[error]     |None of the overloaded alternatives of method stream in object Arrays with types
[error]     | (x$0: Array[Double] | Null, x$1: Int, x$2: Int): java.util.stream².DoubleStream
[error]     |  | Null
[error]     | (x$0: Array[Double] | Null): java.util.stream².DoubleStream | Null
[error]     | (x$0: Array[Long] | Null, x$1: Int, x$2: Int): java.util.stream².LongStream |
[error]     |  Null
[error]     | (x$0: Array[Long] | Null): java.util.stream².LongStream | Null
[error]     | (x$0: Array[Int] | Null, x$1: Int, x$2: Int): java.util.stream².IntStream | Null
[error]     | (x$0: Array[Int] | Null): java.util.stream².IntStream | Null
[error]     | [T]
[error]     |  (x$0: Array[Object & T | Null] | Null, x$1: Int, x$2: Int):
[error]     |    java.util.stream².Stream[T] | Null
[error]     | [T](x$0: Array[Object & T² | Null] | Null): java.util.stream².Stream[T²] | Null
[error]     |match arguments ((AnyArrayHasSeqParStream.this.a : Array[A]))
[error]     |
[error]     |where:    A       is a type in class AnyArrayHasSeqParStream with bounds <: AnyRef
[error]     |          T       is a type variable with constraint <: Object
[error]     |          T²      is a type variable with constraint <: Object
[error]     |          stream  is a method in object Arrays
[error]     |          stream² is a package in package java.util
[error] one error found
[error] Module scala-java8-compat:1.0.0+50-eb16484f-SNAPSHOT is not binary compatible with versions . You have to relax your compatibility intention by changing the value of versionPolicyIntention.
[error] mimaReportBinaryIssues failed
[error] (Compile / compileIncremental) Compilation failed
[error] (versionPolicyMimaCheck) mimaReportBinaryIssues failed
[error] Total time: 6 s, completed Jun 22, 2023, 4:11:08 AM
[error] -- [E134] Type Error: /Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/community-build/community-projects/scala-java8-compat/src/main/scala-2.13+/scala/compat/java8/StreamConverters.scala:175:48 
[error] 175 |    def seqStream: Stream[A] = java.util.Arrays.stream(a)
[error]     |                               ^^^^^^^^^^^^^^^^^^^^^^^
[error]     |None of the overloaded alternatives of method stream in object Arrays with types
[error]     | (x$0: Array[Double] | Null, x$1: Int, x$2: Int): java.util.stream².DoubleStream
[error]     |  | Null
[error]     | (x$0: Array[Double] | Null): java.util.stream².DoubleStream | Null
[error]     | (x$0: Array[Long] | Null, x$1: Int, x$2: Int): java.util.stream².LongStream |
[error]     |  Null
[error]     | (x$0: Array[Long] | Null): java.util.stream².LongStream | Null
[error]     | (x$0: Array[Int] | Null, x$1: Int, x$2: Int): java.util.stream².IntStream | Null
[error]     | (x$0: Array[Int] | Null): java.util.stream².IntStream | Null
[error]     | [T]
[error]     |  (x$0: Array[Object & T | Null] | Null, x$1: Int, x$2: Int):
[error]     |    java.util.stream².Stream[T] | Null
[error]     | [T](x$0: Array[Object & T² | Null] | Null): java.util.stream².Stream[T²] | Null
[error]     |match arguments ((AnyArrayHasSeqParStream.this.a : Array[A]))
[error]     |
[error]     |where:    A       is a type in class AnyArrayHasSeqParStream with bounds <: AnyRef
[error]     |          T       is a type variable with constraint <: Object
[error]     |          T²      is a type variable with constraint <: Object
[error]     |          stream  is a method in object Arrays
[error]     |          stream² is a package in package java.util
[error] one error found
[error] Module scala-java8-compat:1.0.0+50-eb16484f-SNAPSHOT is not binary compatible with versions . You have to relax your compatibility intention by changing the value of versionPolicyIntention.
[error] mimaReportBinaryIssues failed
[error] (Compile / compileIncremental) Compilation failed
[error] (versionPolicyMimaCheck) mimaReportBinaryIssues failed
[error] Total time: 6 s, completed Jun 22, 2023, 4:11:23 AM
[error] Test dotty.communitybuild.CommunityBuildTestC.scalaJava8Compat failed: java.lang.AssertionError: 
[error] 
[error] sbt exited with an error code. To reproduce without JUnit, use:
[error] 
[error]     sbt community-build/prepareCommunityBuild
[error]     cd community-build/community-projects/scala-java8-compat
[error]     sbt -sbt-version 1.8.0 -Dsbt.supershell=false -Ddotty.communitybuild.dir=/Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/community-build --addPluginSbtFile=/Users/y3536zha/Desktop/scala_explicit_unsafe_2/scala_flexible_type_with_test_script/community-build/sbt-injected-plugins "set Global/testOptions += Tests.Argument(TestFramework("munit.Framework"), "+l"); clean; set Global/logLevel := Level.Error; set Global/updateOptions ~= (_.withLatestSnapshots(false)); set Global/scalacOptions ++= List("-Xcheck-macros","-Ysafe-init","-Yexplicit-nulls","-language:unsafeNulls");++3.3.1-RC1-bin-SNAPSHOT!; test"
[error] 
[error] For a faster feedback loop on SBT projects, one can try to extract a direct call to dotc
[error] using the sbt export command. For instance, for scalacheck, use
[error]     sbt export jvm/test:compileIncremental
[error] 
[error] , took 61.672 sec
[error]     at dotty.communitybuild.CommunityBuildTest$package$testRunner$.failWith(CommunityBuildTest.scala:15)
[error]     at dotty.communitybuild.CommunityBuildRunner.runProject(CommunityBuildRunner.scala:93)
[error]     at dotty.communitybuild.CommunityBuildRunner.runProject$(CommunityBuildRunner.scala:33)
[error]     at dotty.communitybuild.CommunityBuildTest$package$testRunner$.runProject(CommunityBuildTest.scala:14)
[error]     at dotty.communitybuild.CommunityBuildRunner$.run(CommunityBuildRunner.scala:28)
[error]     at dotty.communitybuild.CommunityBuildTestC.scalaJava8Compat(CommunityBuildTest.scala:85)
[error]     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error]     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
[error]     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[error]     at java.lang.reflect.Method.invoke(Unknown Source)
[error]     ...
[error] Failed: Total 1, Failed 1, Errors 0, Passed 0
[error] Failed tests:
[error] 	dotty.communitybuild.CommunityBuildTestC
[error] (community-build / Test / testOnly) sbt.TestsFailedException: Tests unsuccessful
[error] Total time: 85 s (01:25), completed Jun 22, 2023, 4:11:24 AM
